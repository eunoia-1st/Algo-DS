============ Binary Search ============

== Recursive Binary Search: Base Case I ==

# Binary Search Method
def binary_search(sorted_list, target):
  if len(sorted_list) == 0:
    return "value not found"
  mid_idx = len(sorted_list)//2
  mid_val = sorted_list[mid_idx]
  return mid_idx, mid_val
  
# For testing:
sorted_values = [13, 14, 15, 16, 17]
print(binary_search([], 42))     # Output: value not found
print(binary_search(sorted_values, 42))    # Output: (2, 15)

# Pada tahap ini, fungsi ini belum sepenuhnya menyelesaikan algoritma pencarian biner, 
# namun hanya memberikan informasi tentang nilai tengah dan indeks tengah pada iterasi saat ini.

== Recursive Binary Search: Base Case II ==

def binary_search(sorted_list, target):
  if not sorted_list:
    return 'value not found'
  mid_idx = len(sorted_list)//2
  mid_val = sorted_list[mid_idx]
  if mid_val == target:    # menunjukkan bahwa nilai yang dicari 
    return mid_idx         # ditemukan pada posisi tersebut.
    
# For testing:
sorted_values = [13, 14, 15, 16, 17]
print(binary_search([], 42))     # Output: value not found
print(binary_search(sorted_values, 42))    # Output: (2, 15)
print(binary_search(sorted_values, 15))    # Output: 2

# pada tahap ini kita hanya bisa mencari posisi value = 15, 
# karena method hanya mencari value tengah pada sebuah list
# jika kita memasukan, angka lain maka, Output: None.

== The Recursive Steps ==

# define binary_search()
def binary_search(sorted_list, target):
  if not sorted_list:
    return 'value not found'
  mid_idx = len(sorted_list)//2
  mid_val = sorted_list[mid_idx]
  if mid_val == target:
    return mid_idx
  if mid_val > target:
    left_half = sorted_list[:mid_idx]
    return binary_search(left_half, target)
  if mid_val < target:
    right_half = sorted_list[mid_idx+1:]
    result = binary_search(right_half, target)
    if result == "value not found":
      return result
    else:
      return result + mid_idx + 1
# For testing:
sorted_values = [13, 14, 15, 16, 17]
print(binary_search(sorted_values, 16))  Output: 3

== Recursive Steps: Refatcor ==

def binary_search(sorted_list, left_pointer, right_pointer, target):
  # this condition indicates we've reached an empty "sub-list"
  if left_pointer >= right_pointer:
    return "value not found"
	
  # We calculate the middle index from the pointers now
  mid_idx = (left_pointer + right_pointer) // 2
  mid_val = sorted_list[mid_idx]

  if mid_val == target:
    return mid_idx
  if mid_val > target:
    # we reduce the sub-list by passing in a new right_pointer
    return binary_search(sorted_list, left_pointer, mid_idx, target)
  if mid_val < target:
    # we reduce the sub-list by passing in a new left_pointer
    return binary_search(sorted_list, mid_idx + 1, right_pointer, target)
  
values = [77, 80, 102, 123, 288, 300, 540]
start_of_values = 0
end_of_values = len(values)
result = binary_search(values, start_of_values, end_of_values, 288)

print("element {0} is located at index {1}".format(288, result))  #Output: element 288 is located at index 4

== Iterative Binary Search ==

def binary_search(sorted_list, target):
  left_pointer = 0
  right_pointer = len(sorted_list)
  
  # fill in the condition for the while loop
  while left_pointer < right_pointer:
    # calculate the middle index using the two pointers
    mid_idx = (left_pointer + right_pointer) // 2
    mid_val = sorted_list[mid_idx]
    if mid_val == target:
      return mid_idx
    if target < mid_val:
      # set the right_pointer to the appropriate value
      right_pointer = mid_idx
    if target > mid_val:
      # set the left_pointer to the appropriate value
      left_pointer = mid_idx + 1
  
  return "Value not in list"

# test cases
print(binary_search([5,6,7,8,9], 9))   #Output: 4
print(binary_search([5,6,7,8,9], 10))  #Output: Value not in list
print(binary_search([5,6,7,8,9], 8))   #Output: 3
print(binary_search([5,6,7,8,9], 4))   #Output: Value not in list
print(binary_search([5,6,7,8,9], 6))   #Output: 1

== Praktikum Algo DS: Rabu, 6 Maret 2024 ==

data = [7,8,9,10,11,32,42,53,64,100,533]

cari = int(input("Cari tau index pada Data: "))

lidx = 0
ridx = len(data)-1
midx = (lidx + ridx)/2
midx = round(midx)

while True:
    if cari == data[midx]:
        print("Angka ketemu pada index ", midx)
        break
    if cari < data[midx]:
        ridx = midx - 1
        midx = (lidx + ridx)/2
        midx = round(midx)
    if cari > data[midx]:
        lidx = midx + 1
        midx = (lidx + ridx)/2
        midx = round(midx)
    if lidx > ridx:
        print("Data tidak ketemu")
        break












